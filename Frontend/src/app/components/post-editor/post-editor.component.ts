import { Post } from './../../models/Post';
import { DialogData } from './../confirm-dialog/dialog-data.interface';
import { ConfirmDialogComponent } from './../confirm-dialog/confirm-dialog.component';
import { Component, OnInit, ViewChild, Output, EventEmitter } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { MatDialog, MatDialogRef } from '@angular/material';

@Component({
  selector: 'post-editor',
  templateUrl: './post-editor.component.html',
  styleUrls: ['./post-editor.component.css']
})
export class PostEditorComponent implements OnInit {
  // TODO: Input to give feedback if submit fails or otherwise show failed messages
  @Output('onSubmit') onSubmitHandler: EventEmitter<Post> = new EventEmitter();
  

  @ViewChild('stepper') stepperComponent; 
  
  sLinear = false;
  firstFormGroup: FormGroup;
  secondFormGroup: FormGroup;

  resetDialogRef: MatDialogRef<ConfirmDialogComponent>;

  constructor(private formBuilder: FormBuilder,public dialog: MatDialog) { }

  ngOnInit() {
    this.firstFormGroup = this.formBuilder.group({
      firstCtrl: ['']
    });
    this.secondFormGroup = this.formBuilder.group({
      titleCtrl: ['', Validators.required],
      bodyCtrl: ['', Validators.required]
    });
  }

  
  /**
   * Opens a dialog to confirm reset, and if confirmed, resets all fields
   */
  onResetClick() {
    let dialogData: DialogData = {
      title: "Reset Post?", 
      body: "Are you sure you want to reset your post?",
      positiveActionName: "Reset",
      negativeActionName: "Cancel"
    };


    // Open the dialog to confirm or deny the reset
    this.resetDialogRef = this.dialog.open(ConfirmDialogComponent, {
      data: dialogData
    })

    // Handle the user's response
    this.resetDialogRef
      .afterClosed()
      .subscribe(isAffirmative => {
        if(isAffirmative) {
          this.stepperComponent.reset();
        }
      });
  }

  
  /**
   * Handles form validation and outputs post data if seems valid
   */
  onSubmitClick() {
    // TODO: Actually do full validation on all form data first before continuing here
    if(this.secondFormGroup.invalid) {
      console.log("Form is invalid so cancelling submit...");
      return;
    }

    // Populate the post to create (id will be generated by service)
    let post: Post = {
      id: -1,
      title: this.secondFormGroup.controls.titleCtrl.value,
      content: this.secondFormGroup.controls.bodyCtrl.value
    };
    this.onSubmitHandler.emit(post);
  }
}